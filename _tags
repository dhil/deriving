# OASIS_START
# DO NOT EDIT (digest: d18b5bb6a87abb49b615d74e8e23c9b9)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library pa_deriving_common
"syntax/common/pa_deriving_common.cmxs": use_pa_deriving_common
"syntax/common/id.cmx": for-pack(Pa_deriving_common)
"syntax/common/utils.cmx": for-pack(Pa_deriving_common)
"syntax/common/type.cmx": for-pack(Pa_deriving_common)
"syntax/common/defs.cmx": for-pack(Pa_deriving_common)
"syntax/common/clusters.cmx": for-pack(Pa_deriving_common)
"syntax/common/base.cmx": for-pack(Pa_deriving_common)
"syntax/common/extend.cmx": for-pack(Pa_deriving_common)
<syntax/common/*.ml{,i}>: package(camlp4.extend)
<syntax/common/*.ml{,i}>: package(camlp4)
# Library pa_deriving
"syntax/std/pa_deriving.cmxs": use_pa_deriving
<syntax/std/*.ml{,i}>: use_pa_deriving_common
<syntax/std/*.ml{,i}>: package(camlp4.extend)
<syntax/std/*.ml{,i}>: package(camlp4)
# Library pa_deriving_tc
"syntax/tc/pa_deriving_tc.cmxs": use_pa_deriving_tc
<syntax/tc/*.ml{,i}>: use_pa_deriving_common
<syntax/tc/*.ml{,i}>: package(type_conv)
<syntax/tc/*.ml{,i}>: package(camlp4.extend)
<syntax/tc/*.ml{,i}>: package(camlp4)
# Library pa_deriving_classes
"syntax/classes/pa_deriving_classes.cmxs": use_pa_deriving_classes
<syntax/classes/*.ml{,i}>: use_pa_deriving_common
<syntax/classes/*.ml{,i}>: package(camlp4.extend)
<syntax/classes/*.ml{,i}>: package(camlp4)
# Library deriving
"lib/deriving.cmxs": use_deriving
# Library deriving-num
"lib/deriving-num.cmxs": use_deriving-num
<lib/*.ml{,i}>: use_deriving
<lib/*.ml{,i}>: use_pa_deriving_classes
<lib/*.ml{,i}>: use_pa_deriving
<lib/*.ml{,i}>: use_pa_deriving_common
<lib/*.ml{,i}>: package(camlp4.extend)
<lib/*.ml{,i}>: package(camlp4)
# Executable test_notc
<tests/notc.{native,byte}>: use_deriving
<tests/notc.{native,byte}>: use_pa_deriving_classes
<tests/notc.{native,byte}>: use_pa_deriving
<tests/notc.{native,byte}>: use_pa_deriving_common
<tests/notc.{native,byte}>: package(camlp4.extend)
<tests/notc.{native,byte}>: package(camlp4)
# Executable test_tc
<tests/tc.{native,byte}>: use_deriving
<tests/tc.{native,byte}>: use_pa_deriving_classes
<tests/tc.{native,byte}>: use_pa_deriving
<tests/tc.{native,byte}>: use_pa_deriving_common
<tests/tc.{native,byte}>: package(camlp4.extend)
<tests/tc.{native,byte}>: package(camlp4)
<tests/*.ml{,i}>: use_deriving
<tests/*.ml{,i}>: use_pa_deriving_classes
<tests/*.ml{,i}>: use_pa_deriving
<tests/*.ml{,i}>: use_pa_deriving_common
<tests/*.ml{,i}>: package(camlp4.extend)
<tests/*.ml{,i}>: package(camlp4)
# OASIS_STOP
