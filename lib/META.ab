version = "$(pkg_version)"
description = "Deriving"

requires = "$(pkg_name).runtime, $(pkg_name).syntax"

## HACK...
archive(syntax, preprocessor) = "-ignore dummy"

package "runtime" (

  archive(byte) = "deriving.cma"
  archive(native) = "deriving.cmxa"
  archive(byte,pkg_num) = "deriving_num.cma"
  archive(native,pkg_num) = "deriving_num.cmxa"

)

package "syntax" (

  requires = "$(pkg_name).syntax.std, $(pkg_name).syntax.classes"

  ## HACK...
  archive(syntax, preprocessor) = "-ignore dummy"

  package "classes" (

    description = "Deriving syntax extension (predefined classes)"
    version = "$(pkg_version)"

    exists_if = "pa_deriving_classes.cma"

    archive(syntax, preprocessor) = "pa_deriving_classes.cma"
    archive(syntax, toploop) = "pa_deriving_classes.cma"

    requires = "$(pkg_name).syntax.common"

  )

  package "common" (

    requires = "unix, camlp4"

    archive(syntax, preprocessor) = "pa_deriving_common.cma"
    archive(syntax, toploop) = "pa_deriving_common.cma"

  )

  package "std" (

    description = "Deriving syntax extension"
    version = "$(pkg_version)"

    exists_if = "pa_deriving_std.cma"

    archive(syntax, preprocessor) = "pa_deriving_std.cma"
    archive(syntax, toploop) = "pa_deriving_std.cma"

    requires = "$(pkg_name).syntax.common, camlp4"

  )

  package "tc" (

    description = "Deriving syntax extension (type_conv compatible syntax)"
    version = "$(pkg_version)"

    exists_if = "pa_deriving_tc.cma"

    archive(syntax, preprocessor) = "pa_deriving_tc.cma"
    archive(syntax, toploop) = "pa_deriving_tc.cma"

    requires = "$(pkg_name).syntax.common, type_conv"

  )

)

package "tc" (
  requires = "$(pkg_name).runtime, $(pkg_name).syntax_tc"
)

package "syntax_tc" (
  requires = "$(pkg_name).syntax.tc, $(pkg_name).syntax.classes"
)
