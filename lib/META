# OASIS_START
# DO NOT EDIT (digest: 67700e1229a7d068757e0f46fbc68b9c)
version = "0.6"
description =
"Extension to OCaml for deriving functions from type declarations"
requires = "deriving.syntax.base deriving.syntax.classes deriving.syntax"
archive(byte) = "deriving.cma"
archive(byte, plugin) = "deriving.cma"
archive(native) = "deriving.cmxa"
archive(native, plugin) = "deriving.cmxs"
exists_if = "deriving.cma"
package "syntax" (
 version = "0.6"
 description = "Deriving syntax"
 requires = "camlp4"
 archive(syntax, preprocessor) = "pa_deriving.cma"
 archive(syntax, toploop) = "pa_deriving.cma"
 archive(syntax, byte) = "pa_deriving.cma"
 archive(syntax, byte, plugin) = "pa_deriving.cma"
 archive(syntax, native) = "pa_deriving.cmxa"
 archive(syntax, native, plugin) = "pa_deriving.cmxs"
 requires(syntax) = "deriving.syntax.base"
 exists_if = "pa_deriving.cma"
 package "tc" (
  version = "0.6"
  description = "Deriving syntax"
  requires = "camlp4"
  archive(syntax, preprocessor) = "pa_deriving_tc.cma"
  archive(syntax, toploop) = "pa_deriving_tc.cma"
  archive(syntax, byte) = "pa_deriving_tc.cma"
  archive(syntax, byte, plugin) = "pa_deriving_tc.cma"
  archive(syntax, native) = "pa_deriving_tc.cmxa"
  archive(syntax, native, plugin) = "pa_deriving_tc.cmxs"
  requires(syntax) = "deriving.syntax.base"
  exists_if = "pa_deriving_tc.cma"
 )
 
 package "classes" (
  version = "0.6"
  description = "Deriving syntax"
  requires = "camlp4"
  archive(syntax, preprocessor) = "pa_deriving_classes.cma"
  archive(syntax, toploop) = "pa_deriving_classes.cma"
  archive(syntax, byte) = "pa_deriving_classes.cma"
  archive(syntax, byte, plugin) = "pa_deriving_classes.cma"
  archive(syntax, native) = "pa_deriving_classes.cmxa"
  archive(syntax, native, plugin) = "pa_deriving_classes.cmxs"
  requires(syntax) = "deriving.syntax.base"
  exists_if = "pa_deriving_classes.cma"
 )
 
 package "base" (
  version = "0.6"
  description = "Deriving syntax"
  requires = "camlp4"
  archive(syntax, preprocessor) = "pa_deriving_common.cma"
  archive(syntax, toploop) = "pa_deriving_common.cma"
  archive(syntax, byte) = "pa_deriving_common.cma"
  archive(syntax, byte, plugin) = "pa_deriving_common.cma"
  archive(syntax, native) = "pa_deriving_common.cmxa"
  archive(syntax, native, plugin) = "pa_deriving_common.cmxs"
  exists_if = "pa_deriving_common.cma"
 )
)

package "num" (
 version = "0.6"
 description =
 "Extension to OCaml for deriving functions from type declarations"
 requires = "deriving"
 archive(byte) = "deriving-num.cma"
 archive(byte, plugin) = "deriving-num.cma"
 archive(native) = "deriving-num.cmxa"
 archive(native, plugin) = "deriving-num.cmxs"
 exists_if = "deriving-num.cma"
)
# OASIS_STOP

archive(byte, pkg_num) = "deriving_num.cma"
archive(byte, plugin, pkg_num) = "deriving_num.cma"
archive(native, pkg_num) = "deriving_num.cmxa"
archive(native, plugin, pkg_num) = "deriving_num.cmxs"
